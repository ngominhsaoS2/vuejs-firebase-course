SECTION 1: Introduction and Setup
4. Environment Setup
Extensions need to be install
- Live server
- Vetur
- Material Icon Theme


SECTION 2: Vue Basics
6. How to use Vue (using the CDN)
We can use Vue in 2 different ways: as a SPA and as a standalone component in a HTML page.
CDN: <script src="https://unpkg.com/vue@next"></script>
    - @next means the latest version
    - we can specify a specific version <script src="https://unpkg.com/vue@3.0.2"></script>


7. Creating a Vue App
We could define template on the app.js file. Another way is define right at the root div (which has id="app")


9. Methods & Click Events
v-on:click is a directive.
@click is short for v-on:click.


10. Conditional Rendering
v-if
v-else
v-show

v-if and v-show might bring the same result, but they are actually different.
    - v-if removes the dom when v-if=false
    - v-show just hides the dom when v-show=false, the dom still exists.

There for, sometimes v-show is more effectively.


11. Other Mouse Events
It always has event as the first param of method.
When you want to pass in some other params, and you also want to use the event param, you have to pass in like:
    handleEvent($event, 5)


12. Outputting Lists (v-for)


13. Attribute Binding
v-bind:href="url"
Short is just :href="url"


14. Dynamic Classes


17. Computed Properties
Computed Property is the property that depends on other data.
When the depended data changes, the computed property will change too.


SECTION 3: The Vue CLI (for Bigger Projects)
19. How to Use the Vue CLI
Needs to have nodejs installed on your computer.
Install VUE CLI globally: npm i -g @vue/cli

vue create modal-project :to create a new project


20. New Project Walkthrough


21. Vue Files & Templates
Every Vue components contains different parts:
- template
- script (optional)
- style (optional)

App.vue has export method, which has components property. This components property is used to register imported components.


22. Template Refs
Template Refs is just like query selector concept in JavaScript.
Template Refs allows to store reference to a DOM element inside variable. Then when
we have that reference ,we can use regular JavaScript methods and properties on it
to do things like changing classes, style...

eg:
<input type="text" ref="name">
handleClick() {
    console.log(this.$refs.name);
    this.$refs.name.classList.add('active');
    this.$refs.name.focus();
}


23. Multiple Components


24. Component Styles & Global Styles
You can use "scoped" on style to indicate that these styles are just applied to this component only.
Create global.css then import on main.js file.


25. Passing Data with Props
We can pass data from parent component to child component.


26. Emitting Custom Events
we can emit event from child component to parent component.


27. Click Event Modifiers
Click event can be more details within modifiers like: @click.alt, @click.shift, @click.self.


28. Slots
Slots are used when you want to pass a large data or content from parent component into child component.
Give slot a name if it's needed. The content inside the default slot just show up when you dont pass in any content for default slot.


29. CHALLENGE - Reusing Components


30. Using Teleport
This feature is used to move some element to a different place, including being out of root element.
Pass in CSS selector to indicate where you want to move the element to.
So, some CSS wont work, you have to re-define them for this purpose.


SECTION 4: PROJECT BUILD - Reaction Timer
31. Project 1 Preview & Setup
vue create <project-name> :to create a Vue project from scratch.
npm run serve :to run the project locally.


32. Starting a New Game


33. Component Lifecycle Hooks
Lifecycle Diagram: https://v3.vuejs.org/guide/instance.html#lifecycle-diagram

You could use whatever hook inside the component.


34. Creating the Reaction Timer


35. Emitting Custom Events with Data


36. CHALLENGE - Showing a Results Component


37. Finishing Touches


SECTION 5: Forms & Data Binding
38. Forms Intro & Setup


39. Two-way Data Binding


40. Select Fields


41. Checkboxes


42. Keyboard Events & Modifiers
v-for always expect for v-bind, to make the element unique from each other.


43. CHALLENGE - Deleting Skills


44. Submitting the Form
@submit will submit the form, but it also refresh the page. We dont want that refresh to happen,
so we use @submit.prevent to avoid that from happenning.


SECTION 6: Vue Router Basics
45. Why Use the Vue Router?


46. Router Setup for New Projects
When creating new project, remember to choose Router option. Also, remember to select Use history mode for router.
Router is defined on router/index.js, and is registered o main.js file.


47. Router Links


48. Folder Structure
components folder is used for storing reusable components.
views folder is used for pages. We could create child folder inside views folder to group them together, make them more meaningful.


49. Route Parameters
$route.params.id


50. Dynamic Links
props: true on index.js route file means, we accept params on the routes as props (like inputs) of the component.


51. 404 Pages & Redirects


52. Programmatic Navigation
$router


53. Lazy Loading Components


SECTION 7: Fetching Data
54. Using JSON Server
npm i -g json-server: Install json-server package. This package is used like replacement for real API that we call.
Just use this package for development purpose.
json-server --watch data/db.json :to provide the json data file that json-server will listen to its changes.


55. Where to Fetch Data
On mounted lifecycle hook.


56. Conditionally Showing Data


SECTION 8: PROJECT BUILD - Simple Project Planner
57. Project 2 Preview & Setup


58. Home View & Data


59. Single Project Template


60. Using Material Icons
https://google.github.io/material-design-icons/
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">


61. Deleting Projects
Using emit to emit data from SingleProject component to Home view.


62. Completing Projects


63. New Project Form


64. Adding New Projects


65. Navbar Component


66. Edit Project Route


67. CHALLENGE - Updating Projects


68. Creating a Filter Nav


69. CHALLENGE - Showing Filtered Projects


SECTION 9: The Composition API
70. Drawbacks of the Options API
Composition API is used for managing code better.


71. Composition API Basics
setup() runs before all lifecycle hook methods.
name and age on setup() is NOT reactive.


72. Template Refs in the Setup Function
You have to return the p ref to use it.


73. Using Refs for Reactivity
variables on setup(), in default, they are not reactive.
const name = ref('saonm');
    - const means ref is a constant
    - it does not mean the value of ref can not be changed
    - then the name variable becomes just like reactive variable


74. Refs vs Reactive
import { reactive, ref } from 'vue'
const ninjaTwo = reactive({ name: 'luigi', age: 35 })
    - so we have 2 variables and they are reactive
    - when using reactive, you dont have to .value (that's the major difference between refs and reactive)

const ninjaTwo = reactive({ name: 'luigi', age: 35 }) // will be reactive
const nameTwo = reactive('luigi') // will NOT be reactive


75. Computed Values in the Setup Function


76. Using watch and watchEffect
watch function will run some codes when the targeted variable changes.
watchEffect will run when setup() runs, if you dont provide any variable to be watched.
watchEffect will watch any values inside it.


77. Using Props in the Setup Function
No need to return the props value.
Take props as the first argument of setup()


78. Lifecycle Hooks
Lifecycle Hooks will have prefix "on" on setup() functions, like mounted becomes onMounted.


SECTION 10: Async Code (& the Composition API)
79. Fetching Data in the Setup Function
load() to run.


80. Reusable Composition Functions (Composables)
Just like services concept of Angular.


81. Creating Another Composable


82. Creating a Loading Spinner


83. Making a Web Form


84. CHALLENGE - Making a POST Request


85. Future Async Lesson & Extra Styling


86. Routing Recap & Navbar


87. Using useRouter
Bacause we cant use either $ or $router on setup(), so we have to import this
import { useRouter } from 'vue-router' then 
const router = useRouter()


88. Using useRoute


91. Creating a Firebase Project


92. Connecting to a Firebase Project
npm i firebase


93. Firestore Collections & Documents
Firebase is NoSQl database.


94. Fetching a Collection of Documents
return { ...doc.data(), id: doc.id } 
    - ...doc.data() part will take all properties of doc.data()


95. Fetching Single Documents
throw Error('That post does not exist') will jump into catch() block.


96. Adding Documents


97. Deleting Docments


98. Using Timestamps


99. Ordering Collections


100. Intro to Real-Time Listeners
Use onSnapshot instead of get().


101. Project 3 Preview & Setup


102. Firebase Setup (& Reusing Firebase Projects)


103. Creating a Signup & Login Form


104. CHALLENGE - Switching Between Forms


105. Firebase Authentication Setup
Needs to enable Email/Password on Firebase, Authentication menu
https://console.firebase.google.com/project/fir-db-test-8821a/authentication/providers


106. Creating a Signup Composable
refs & signup outside of useSignup exported function, they don't need to be re-created every time we invoke useSignup
But we have to reset the value of erro variable.

107. Outputting Errors


108. Creating a Login Composable


109. Setup Context & Emitting Events
context.emit() to emit a Custom Events


110. Navbar Component


111. Logging Users Out (Composable)


112. Getting the Current User (Composable)


113. Route Guards (for Unauth Users)


114. Waiting for Firebase Auth to Initialize


115. CHALLENGE - Watching the Current User
